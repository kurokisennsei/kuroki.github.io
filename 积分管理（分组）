<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>学生积分管理系统（分组版）</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50">
    <div class="max-w-7xl mx-auto p-5">
        <!-- 头部功能区 -->
        <div class="flex flex-wrap gap-3 mb-6">
            <h1 class="text-2xl font-bold text-gray-800 w-full">学生积分排行榜（分组版）</h1>
            <div id="current-date" class="text-gray-600 font-medium"></div>
            
            <button onclick="showAddGroupModal()" class="bg-teal-500 text-white px-4 py-2 rounded hover:bg-teal-600 transition">新增小组</button>
            <button onclick="showAddStudentModal()" class="bg-indigo-500 text-white px-4 py-2 rounded hover:bg-indigo-600 transition">新增学生</button>
            
            <button onclick="importExcel()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition">导入学生名单(Excel)</button>
            <button onclick="importScores()" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition">导入积分数据</button>
            <button onclick="exportScores()" class="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 transition">导出详细积分</button>
            <button onclick="saveData()" class="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600 transition">保存当前数据</button>
            <button onclick="window.print()" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition">打印积分榜</button>
            <button onclick="undoLastAction()" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition" id="undo-btn" disabled>撤销上一步</button>
            
            <input type="file" id="excel-file" accept=".xlsx,.xls" class="hidden">
            <input type="file" id="score-file" accept=".json" class="hidden">
        </div>

        <!-- 小组积分榜区域 -->
        <div id="group-container" class="space-y-6"></div>
    </div>

    <!-- 新增小组弹窗 -->
    <div id="add-group-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
        <div class="bg-white p-6 rounded-lg w-80">
            <h3 class="text-xl font-bold mb-4">新增小组</h3>
            <input type="text" id="new-group-name" placeholder="请输入小组名称" class="w-full p-2 border border-gray-300 rounded mb-4">
            <div class="flex gap-2">
                <button onclick="addGroup()" class="flex-1 bg-green-500 text-white py-2 rounded">确认添加</button>
                <button onclick="hideAddGroupModal()" class="flex-1 bg-gray-300 py-2 rounded">取消</button>
            </div>
        </div>
    </div>

    <!-- 编辑小组名称弹窗 -->
    <div id="edit-group-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
        <div class="bg-white p-6 rounded-lg w-80">
            <h3 class="text-xl font-bold mb-4">修改小组名称</h3>
            <input type="text" id="edit-group-name" placeholder="请输入新的小组名称" class="w-full p-2 border border-gray-300 rounded mb-4">
            <input type="hidden" id="edit-group-id"> <!-- 用于存储当前编辑的小组ID -->
            <div class="flex gap-2">
                <button onclick="saveGroupName()" class="flex-1 bg-green-500 text-white py-2 rounded">保存修改</button>
                <button onclick="hideEditGroupModal()" class="flex-1 bg-gray-300 py-2 rounded">取消</button>
            </div>
        </div>
    </div>

    <!-- 新增学生弹窗 -->
    <div id="add-student-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
        <div class="bg-white p-6 rounded-lg w-80">
            <h3 class="text-xl font-bold mb-4">新增学生</h3>
            <select id="student-group" class="w-full p-2 border border-gray-300 rounded mb-4">
                <option value="">请选择小组</option>
            </select>
            <input type="text" id="new-student-name" placeholder="请输入学生姓名" class="w-full p-2 border border-gray-300 rounded mb-4">
            <div class="flex gap-2">
                <button onclick="addStudent()" class="flex-1 bg-green-500 text-white py-2 rounded">确认添加</button>
                <button onclick="hideAddStudentModal()" class="flex-1 bg-gray-300 py-2 rounded">取消</button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
    <script>
        // 初始化数据结构
        let groupData = JSON.parse(localStorage.getItem('groupData')) || [];
        let studentData = JSON.parse(localStorage.getItem('studentScores')) || [];
        let scoreRecords = JSON.parse(localStorage.getItem('scoreRecords')) || {};
        let actionHistory = [];
        const MAX_HISTORY = 10;

        // 页面加载时执行
        document.addEventListener('DOMContentLoaded', () => {
            const today = new Date();
            document.getElementById('current-date').textContent = `当前日期：${today.toLocaleDateString()}`;
            renderGroups();
            updateUndoButton();
        });

        // 渲染所有小组
        function renderGroups() {
            const container = document.getElementById('group-container');
            container.innerHTML = '';

            if (groupData.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-10 bg-white rounded-lg shadow">
                        <p class="text-gray-500">暂无小组数据，请点击"新增小组"创建第一个小组</p>
                    </div>
                `;
                return;
            }

            groupData.forEach(group => {
                const groupStudents = [...studentData]
                    .filter(student => student.groupId === group.id)
                    .sort((a, b) => b.score - a.score);

                const groupCard = document.createElement('div');
                groupCard.className = 'bg-white rounded-lg shadow p-5';
                
                groupCard.innerHTML = `
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-bold text-gray-800 flex items-center">
                            🏫 ${group.name} 
                            <span class="ml-2 text-sm font-normal text-gray-500">(${groupStudents.length}人)</span>
                        </h2>
                        <div class="flex gap-2">
                            <button onclick="showEditGroupModal('${group.id}', '${group.name}')" 
                                    class="text-sm bg-blue-100 text-blue-800 px-2 py-1 rounded hover:bg-blue-200 transition">
                                编辑组名
                            </button>
                            <button onclick="deleteGroup('${group.id}')" 
                                    class="text-sm bg-red-100 text-red-800 px-2 py-1 rounded hover:bg-red-200 transition">
                                删除小组
                            </button>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3">
                        ${groupStudents.length > 0 ? '' : `
                            <div class="col-span-full text-center py-4 text-gray-500">
                                该小组暂无学生，请添加学生
                            </div>
                        `}
                        
                        ${groupStudents.map((student, index) => {
                            const topIcon = index < 3 ? `<span class="text-yellow-500 mr-1">👍</span>` : '';
                            return `
                                <div class="p-3 border rounded-lg ${index < 3 ? 'border-yellow-400' : 'border-gray-200'}">
                                    <div class="flex justify-between items-center">
                                        <span class="font-medium">${topIcon}${student.name}</span>
                                        <span class="font-bold ${index < 3 ? 'text-yellow-600' : 'text-gray-700'}">${student.score}分</span>
                                    </div>
                                    <div class="flex gap-1 mt-2">
                                        <button onclick="updateScore('${student.id}', 1)" class="flex-1 bg-green-500 text-white text-xs py-1 rounded">+1</button>
                                        <button onclick="updateScore('${student.id}', -1)" class="flex-1 bg-red-500 text-white text-xs py-1 rounded">-1</button>
                                        <button onclick="deleteStudent('${student.id}')" class="bg-gray-200 text-gray-700 text-xs px-1 rounded">×</button>
                                    </div>
                                </div>
                            `;
                        }).join('')}
                    </div>
                `;
                
                container.appendChild(groupCard);
            });

            updateGroupSelectOptions();
        }

        // 显示编辑小组名称弹窗
        function showEditGroupModal(groupId, currentName) {
            document.getElementById('edit-group-id').value = groupId;
            document.getElementById('edit-group-name').value = currentName;
            document.getElementById('edit-group-modal').classList.remove('hidden');
            document.getElementById('edit-group-name').focus();
        }

        // 隐藏编辑小组名称弹窗
        function hideEditGroupModal() {
            document.getElementById('edit-group-modal').classList.add('hidden');
            document.getElementById('edit-group-id').value = '';
            document.getElementById('edit-group-name').value = '';
        }

        // 保存修改后的小组名称
        function saveGroupName() {
            const groupId = document.getElementById('edit-group-id').value;
            const newName = document.getElementById('edit-group-name').value.trim();
            
            if (!groupId) {
                alert('未找到小组信息');
                return;
            }
            
            if (!newName) {
                alert('小组名称不能为空');
                return;
            }
            
            const group = groupData.find(g => g.id === groupId);
            if (group.name === newName) {
                // 名称未改变，直接关闭弹窗
                hideEditGroupModal();
                return;
            }
            
            // 记录操作历史用于撤销
            saveActionHistory();
            
            // 更新小组名称
            group.name = newName;
            
            renderGroups();
            saveData();
            updateUndoButton();
            hideEditGroupModal();
            alert('小组名称已更新');
        }

        // 其他功能代码保持不变（新增小组、新增学生、积分操作等）
        function updateGroupSelectOptions() {
            const select = document.getElementById('student-group');
            const currentValue = select.value;
            
            select.innerHTML = '<option value="">请选择小组</option>';
            groupData.forEach(group => {
                const option = document.createElement('option');
                option.value = group.id;
                option.textContent = group.name;
                select.appendChild(option);
            });
            
            if (currentValue) select.value = currentValue;
        }

        function addGroup() {
            const groupName = document.getElementById('new-group-name').value.trim();
            if (!groupName) {
                alert('请输入小组名称');
                return;
            }

            saveActionHistory();
            
            groupData.push({
                id: 'group_' + Date.now(),
                name: groupName
            });

            renderGroups();
            saveData();
            updateUndoButton();
            hideAddGroupModal();
        }

        function deleteGroup(groupId) {
            const group = groupData.find(g => g.id === groupId);
            const groupStudents = studentData.filter(s => s.groupId === groupId);
            
            if (!confirm(`确定要删除"${group.name}"吗？该小组的${groupStudents.length}名学生也会被删除`)) {
                return;
            }

            saveActionHistory();
            
            groupData = groupData.filter(g => g.id !== groupId);
            studentData = studentData.filter(s => s.groupId !== groupId);
            Object.keys(scoreRecords).forEach(date => {
                groupStudents.forEach(student => {
                    delete scoreRecords[date][student.id];
                });
            });

            renderGroups();
            saveData();
            updateUndoButton();
        }

        function addStudent() {
            const groupId = document.getElementById('student-group').value;
            const studentName = document.getElementById('new-student-name').value.trim();
            
            if (!groupId) {
                alert('请选择所属小组');
                return;
            }
            if (!studentName) {
                alert('请输入学生姓名');
                return;
            }

            saveActionHistory();
            
            studentData.push({
                id: 'student_' + Date.now(),
                name: studentName,
                score: 0,
                groupId: groupId
            });

            renderGroups();
            saveData();
            updateUndoButton();
            hideAddStudentModal();
        }

        function deleteStudent(studentId) {
            const student = studentData.find(s => s.id === studentId);
            if (!confirm(`确定要删除学生"${student.name}"吗？`)) {
                return;
            }

            saveActionHistory();
            
            studentData = studentData.filter(s => s.id !== studentId);
            Object.keys(scoreRecords).forEach(date => {
                delete scoreRecords[date][studentId];
            });

            renderGroups();
            saveData();
            updateUndoButton();
        }

        function updateScore(studentId, change) {
            saveActionHistory();
            
            const today = new Date().toLocaleDateString();
            const student = studentData.find(s => s.id === studentId);
            
            if (student) {
                student.score = Math.max(0, student.score + change);
                
                if (!scoreRecords[today]) scoreRecords[today] = {};
                if (!scoreRecords[today][studentId]) scoreRecords[today][studentId] = 0;
                scoreRecords[today][studentId] += change;
                
                renderGroups();
                saveData();
                updateUndoButton();
            }
        }

        function importExcel() {
            document.getElementById('excel-file').click();
            document.getElementById('excel-file').onchange = function(e) {
                const file = e.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    saveActionHistory();
                    
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                    const students = XLSX.utils.sheet_to_json(firstSheet);

                    students.forEach(student => {
                        let groupId;
                        if (student.group) {
                            const existingGroup = groupData.find(g => g.name === student.group);
                            if (existingGroup) {
                                groupId = existingGroup.id;
                            } else {
                                const newGroupId = 'group_' + Date.now();
                                groupData.push({ id: newGroupId, name: student.group });
                                groupId = newGroupId;
                            }
                        } else {
                            if (groupData.length === 0) {
                                const newGroupId = 'group_' + Date.now();
                                groupData.push({ id: newGroupId, name: '默认小组' });
                                groupId = newGroupId;
                            } else {
                                groupId = groupData[0].id;
                            }
                        }

                        studentData.push({
                            id: 'student_' + Date.now() + Math.random().toString(36).substr(2, 5),
                            name: student.name || '未命名',
                            score: 0,
                            groupId: groupId
                        });
                    });

                    renderGroups();
                    saveData();
                    updateUndoButton();
                    alert(`成功导入${students.length}名学生`);
                };
                reader.readAsArrayBuffer(file);
            };
        }

        function showAddGroupModal() {
            document.getElementById('add-group-modal').classList.remove('hidden');
            document.getElementById('new-group-name').focus();
        }

        function hideAddGroupModal() {
            document.getElementById('add-group-modal').classList.add('hidden');
            document.getElementById('new-group-name').value = '';
        }

        function showAddStudentModal() {
            document.getElementById('add-student-modal').classList.remove('hidden');
            document.getElementById('new-student-name').focus();
        }

        function hideAddStudentModal() {
            document.getElementById('add-student-modal').classList.add('hidden');
            document.getElementById('new-student-name').value = '';
        }

        function saveActionHistory() {
            const historyItem = {
                groupData: JSON.parse(JSON.stringify(groupData)),
                studentData: JSON.parse(JSON.stringify(studentData)),
                scoreRecords: JSON.parse(JSON.stringify(scoreRecords))
            };
            
            actionHistory.push(historyItem);
            if (actionHistory.length > MAX_HISTORY) {
                actionHistory.shift();
            }
            
            updateUndoButton();
        }

        function undoLastAction() {
            if (actionHistory.length > 0) {
                const lastState = actionHistory.pop();
                groupData = lastState.groupData;
                studentData = lastState.studentData;
                scoreRecords = lastState.scoreRecords;
                
                renderGroups();
                saveData();
                updateUndoButton();
                alert('已撤销上一步操作');
            }
        }

        function updateUndoButton() {
            const undoBtn = document.getElementById('undo-btn');
            undoBtn.disabled = actionHistory.length === 0;
            undoBtn.classList.toggle('opacity-50', actionHistory.length === 0);
            undoBtn.classList.toggle('cursor-not-allowed', actionHistory.length === 0);
        }

        function exportScores() {
            const exportData = {
                exportDate: new Date().toLocaleString(),
                groups: groupData,
                students: studentData,
                dailyRecords: scoreRecords,
                weeklySummary: getWeeklySummary(),
                monthlySummary: getMonthlySummary()
            };

            const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            
            a.href = url;
            a.download = `学生积分明细_${new Date().toLocaleDateString()}.json`;
            a.click();
            URL.revokeObjectURL(url);
        }

        function importScores() {
            document.getElementById('score-file').click();
            document.getElementById('score-file').onchange = function(e) {
                const file = e.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    saveActionHistory();
                    
                    const data = JSON.parse(e.target.result);
                    groupData = data.groups || [];
                    studentData = data.students || [];
                    scoreRecords = data.records || data.dailyRecords || {};
                    
                    renderGroups();
                    saveData();
                    updateUndoButton();
                    alert('积分数据导入成功');
                };
                reader.readAsText(file);
            };
        }

        function getWeeklySummary() {
            const summary = {};
            Object.keys(scoreRecords).forEach(date => {
                const week = new Date(date).toLocaleDateString('zh-CN', { week: 'numeric', year: 'numeric' });
                if (!summary[week]) summary[week] = {};
                
                Object.keys(scoreRecords[date]).forEach(studentId => {
                    const student = studentData.find(s => s.id === studentId);
                    if (student) {
                        const group = groupData.find(g => g.id === student.groupId);
                        const key = `${group ? group.name + '-' : ''}${student.name}`;
                        if (!summary[week][key]) summary[week][key] = 0;
                        summary[week][key] += scoreRecords[date][studentId];
                    }
                });
            });
            return summary;
        }

        function getMonthlySummary() {
            const summary = {};
            Object.keys(scoreRecords).forEach(date => {
                const month = new Date(date).toLocaleDateString('zh-CN', { month: 'long', year: 'numeric' });
                if (!summary[month]) summary[month] = {};
                
                Object.keys(scoreRecords[date]).forEach(studentId => {
                    const student = studentData.find(s => s.id === studentId);
                    if (student) {
                        const group = groupData.find(g => g.id === student.groupId);
                        const key = `${group ? group.name + '-' : ''}${student.name}`;
                        if (!summary[month][key]) summary[month][key] = 0;
                        summary[month][key] += scoreRecords[date][studentId];
                    }
                });
            });
            return summary;
        }

        function saveData() {
            localStorage.setItem('groupData', JSON.stringify(groupData));
            localStorage.setItem('studentScores', JSON.stringify(studentData));
            localStorage.setItem('scoreRecords', JSON.stringify(scoreRecords));
        }
    </script>
</body>
</html>
